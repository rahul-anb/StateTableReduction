"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./generator.js":
/*!**********************!*\
  !*** ./generator.js ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"compareArrays\": function() { return /* binding */ compareArrays; },\n/* harmony export */   \"createTable\": function() { return /* binding */ createTable; },\n/* harmony export */   \"deleteEquivalentRow\": function() { return /* binding */ deleteEquivalentRow; },\n/* harmony export */   \"deleteRow\": function() { return /* binding */ deleteRow; },\n/* harmony export */   \"exInput1\": function() { return /* binding */ exInput1; },\n/* harmony export */   \"exInput2\": function() { return /* binding */ exInput2; },\n/* harmony export */   \"findAndReplaceFullyEquivalentRows\": function() { return /* binding */ findAndReplaceFullyEquivalentRows; },\n/* harmony export */   \"findEquivalentStates\": function() { return /* binding */ findEquivalentStates; },\n/* harmony export */   \"firstIteration\": function() { return /* binding */ firstIteration; },\n/* harmony export */   \"getEmptyImplicationTableFor\": function() { return /* binding */ getEmptyImplicationTableFor; },\n/* harmony export */   \"implicationTableStep\": function() { return /* binding */ implicationTableStep; },\n/* harmony export */   \"initializeUnequalStateList\": function() { return /* binding */ initializeUnequalStateList; },\n/* harmony export */   \"prettyPrintTable\": function() { return /* binding */ prettyPrintTable; },\n/* harmony export */   \"printIterations\": function() { return /* binding */ printIterations; },\n/* harmony export */   \"printTable\": function() { return /* binding */ printTable; },\n/* harmony export */   \"reduceStateTable\": function() { return /* binding */ reduceStateTable; },\n/* harmony export */   \"repeatImplicationTable\": function() { return /* binding */ repeatImplicationTable; },\n/* harmony export */   \"reverseString\": function() { return /* binding */ reverseString; },\n/* harmony export */   \"solve\": function() { return /* binding */ solve; }\n/* harmony export */ });\nvar _ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\nvar exInput1 = {\n    \"present-state\": [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\"\n    ],\n    \"next-state-x0\": [\n        \"a\",\n        \"d\",\n        \"f\",\n        \"d\",\n        \"b\",\n        \"g\",\n        \"a\"\n    ],\n    \"next-state-x1\": [\n        \"b\",\n        \"c\",\n        \"b\",\n        \"f\",\n        \"g\",\n        \"c\",\n        \"f\"\n    ],\n    \"output-x0\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ],\n    \"output-x1\": [\n        0,\n        1,\n        0,\n        0,\n        0,\n        1,\n        0\n    ]\n};\nvar exInput2 = {\n    \"present-state\": [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\"\n    ],\n    \"next-state-x0\": [\n        \"b\",\n        \"d\",\n        \"f\",\n        \"a\",\n        \"a\",\n        \"a\",\n        \"a\"\n    ],\n    \"next-state-x1\": [\n        \"c\",\n        \"e\",\n        \"g\",\n        \"a\",\n        \"a\",\n        \"a\",\n        \"a\"\n    ],\n    \"output-x0\": [\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        1\n    ],\n    \"output-x1\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ]\n};\nfunction printTable(table) {\n    for(var i = 0; i < table.length; i++)console.log(table[i]);\n}\nfunction prettyPrintTable(table) {\n    for(var i = 0; i < table.length; i++){\n        var row = \"\";\n        for(var j = 0; j < table[0].length; j++){\n            var cell = \"\";\n            var k;\n            for(k = 0; k < table[i][j].length - 1; k++){\n                cell += table[i][j][k] + \",\";\n            }\n            cell += table[i][j][k];\n            if (cell != \"undefined\") row += \"[\".concat(cell, \"] \");\n        }\n        if (row != \"\") console.log(row);\n    }\n}\nfunction reverseString(str) {\n    var arrayStrings = str.split(\"\");\n    var reverseArray = arrayStrings.reverse();\n    var joinArray = reverseArray.join(\"\");\n    return joinArray;\n}\nfunction compareArrays(array1, array2, s1, s2, n) {\n    var a1 = \"\", a2 = \"\";\n    for(var i = 0; i < n; i++){\n        a1 = a1 + array1[s1 + i] + \":\";\n        a2 = a2 + array2[s2 + i] + \":\";\n    }\n    if (a1 == a2) return true;\n    return false;\n}\nfunction createTable(input) {\n    var stateTable = [];\n    var totalStates = input[\"present-state\"].length;\n    for(var state = 0; state < totalStates; state++){\n        var row = [];\n        row.push(input[\"present-state\"][state]);\n        row.push(input[\"next-state-x0\"][state]);\n        row.push(input[\"next-state-x1\"][state]);\n        row.push(input[\"output-x0\"][state]);\n        row.push(input[\"output-x1\"][state]);\n        stateTable.push(row);\n    }\n    return stateTable;\n}\nfunction findAndReplaceFullyEquivalentRows(table) {\n    var output = [\n        [],\n        [],\n        [],\n        []\n    ];\n    var totalStates = table.length;\n    var totalRowEntries = table[0].length;\n    for(var i = 0; i < totalStates; i++){\n        for(var j = 0; j < totalStates; j++){\n            if (i != j) {\n                if (compareArrays(table[i], table[j], 1, 1, totalRowEntries)) {\n                    if (compareArrays(table[i], [\n                        0,\n                        0\n                    ], 3, 0, 2) && !output[0].includes(table[i][0])) output[0].push(table[i][0]);\n                    else if (compareArrays(table[i], [\n                        0,\n                        1\n                    ], 3, 0, 2) && !output[1].includes(table[i][0])) output[1].push(table[i][0]);\n                    else if (compareArrays(table[i], [\n                        1,\n                        0\n                    ], 3, 0, 2) && !output[2].includes(table[i][0])) output[2].push(table[i][0]);\n                    else if (compareArrays(table[i], [\n                        1,\n                        1\n                    ], 3, 0, 2) && !output[3].includes(table[i][0])) output[3].push(table[i][0]);\n                }\n            }\n        }\n    }\n    for(var i1 = 0; i1 < output.length; i1++){\n        output[i1] = output[i1].sort();\n        if (output[i1].length != 0) {\n            for(var j1 = 0; j1 < table.length; j1++){\n                if (output[i1].includes(table[j1][1])) table[j1][1] = output[i1][0];\n                if (output[i1].includes(table[j1][2])) table[j1][2] = output[i1][0];\n            }\n        }\n    }\n    return output;\n}\nfunction getEmptyImplicationTableFor(table) {\n    var implicationTable = [];\n    for(var i = 0; i < table.length; i++){\n        var row = [];\n        for(var j = 0; j < table.length; j++)row.push([]);\n        implicationTable.push(row);\n    }\n    return implicationTable;\n}\nfunction firstIteration(table, STable) {\n    var row = 0, col = 0;\n    var tableLength = table.length;\n    var rowSize = table[0].length;\n    for(var i = 0; i < tableLength; i++){\n        for(var j = 0; j < tableLength; j++){\n            if (i < j && row < tableLength) {\n                if (compareArrays(table[i], table[j])) if (compareArrays(table[i], table[j], 3, 3, rowSize - 3) && !STable[row][col].includes(\"X\")) {\n                    if (table[i][1] == table[j][1] && table[i][2] == table[j][2] && table[i][1] == table[i][2]) STable[row][col].push(table[i][1] + \"=\" + table[j][1]);\n                    if (table[i][1] != table[j][1] && table[i][0] + table[j][0] != table[i][1] + table[j][1] && table[i][0] + table[j][0] != table[j][1] + table[i][1]) STable[row][col].push(table[i][1] + \"=\" + table[j][1]);\n                    if (!STable[row][col].includes(table[i][2] + \"=\" + table[j][2]) && table[i][2] != table[j][2] && table[i][0] + table[j][0] != table[i][2] + table[j][2] && table[i][0] + table[j][0] != table[j][2] + table[i][2]) STable[row][col].push(table[i][2] + \"=\" + table[j][2]);\n                } else {\n                    STable[row][col].push(\"X\");\n                }\n                if (STable[row][col].length == 0) STable[row][col].push(\"X\");\n            }\n            row += 1;\n        }\n        col += 1;\n        row = 0;\n    }\n}\nfunction initializeUnequalStateList(list, STable) {\n    var row = \"b\", col = \"a\";\n    for(var i = 1; i < STable.length; i++){\n        for(var j = 0; j < i; j++){\n            if (STable[i][j].includes(\"X\")) list.push(\"\".concat(row, \"=\").concat(col));\n            col = String.fromCharCode(col.codePointAt(0) + 1);\n        }\n        row = String.fromCharCode(row.codePointAt(0) + 1);\n        col = \"a\";\n    }\n    return list;\n}\nfunction implicationTableStep(STable, unequalStateList) {\n    var newUnequalStateList = _.cloneDeep(unequalStateList);\n    var row = \"b\";\n    var col = \"a\";\n    for(var i = 1; i < STable.length; i++){\n        for(var j = 0; j < i; j++){\n            for(var k = 0; k < STable[i][j].length; k++){\n                var entry = STable[i][j][k];\n                if (entry != \"X\" && (unequalStateList.includes(entry) || unequalStateList.includes(reverseString(entry)))) {\n                    newUnequalStateList.push(\"\".concat(row, \"=\").concat(col));\n                    STable[i][j] = [\n                        \"X\"\n                    ];\n                }\n            }\n            col = String.fromCharCode(col.codePointAt(0) + 1);\n        }\n        row = String.fromCharCode(row.codePointAt(0) + 1);\n        col = \"a\";\n    }\n    return newUnequalStateList;\n}\nfunction repeatImplicationTable(iterations, STable, unequalStateList) {\n    var xCount = 0, xCountNew = 0;\n    while(true){\n        xCount = 0;\n        xCountNew = 0;\n        for(var k = 1; k < STable.length; k++){\n            for(var l = 0; l < k; l++){\n                if (STable[k][l] == \"X\") xCount += 1;\n            }\n        }\n        unequalStateList = implicationTableStep(STable, unequalStateList);\n        var clone = STable;\n        for(var k1 = 1; k1 < STable.length; k1++){\n            for(var l1 = 0; l1 < k1; l1++){\n                if (STable[k1][l1] == \"X\") xCountNew += 1;\n            }\n        }\n        if (xCount == xCountNew || xCountNew == (STable.length - 1) * STable.length / 2) return;\n        iterations.push(_.cloneDeep(STable));\n    }\n}\nfunction findEquivalentStates(STable, list) {\n    for(var i = 1; i < STable.length; i++){\n        for(var j = 0; j < i; j++){\n            if (STable[i][j] != \"X\") list.push(STable[i][j]);\n        }\n    }\n    return list;\n}\nfunction reduceStateTable(table, equivalentStates) {\n    for(var i = 0; i < equivalentStates.length; i++){\n        for(var j = 0; j < table.length; j++){\n            if (table[j][0] == equivalentStates[i][0][equivalentStates[i][0].length - 1]) {\n                table.splice(j, 1);\n                break;\n            }\n        }\n        for(var j1 = 0; j1 < table.length; j1++){\n            for(var k = 1; k < 3; k++){\n                if (table[j1][k] == equivalentStates[i][0][equivalentStates[i][0].length - 1]) table[j1][k] = equivalentStates[i][0][0];\n            }\n        }\n    }\n    for(var i1 = 0; i1 < table.length; i1++){\n        for(var j2 = i1 + 1; j2 < table.length; j2++){\n            if (table[i1][1] + table[i1][2] + table[i1][3] + table[i1][4] == table[j2][1] + table[j2][2] + table[j2][3] + table[j2][4]) {\n                table.splice(j2, 1);\n            }\n        }\n    }\n    return table;\n}\nfunction deleteRow(arr, row) {\n    arr = arr.slice(0); // make copy\n    arr.splice(row - 1, 1);\n    return arr;\n}\nfunction deleteEquivalentRow(table, output) {\n    console.log(\"test\");\n    for(var i = 0; i < output.length; i++){\n        if (output[i].length != 0) {\n            var clone = output[i].splice(0);\n            clone.shift();\n            for(var k = 0; k < table.length; k++){\n                console.log(clone);\n                console.log(table[k][0]);\n                console.log(clone.includes(table[k][0]));\n                if (clone.includes(table[k][0])) {\n                    table = deleteRow(table, k + 1);\n                    break;\n                }\n            }\n        }\n    }\n    return table;\n}\nfunction solve(input) {\n    var iterations = [];\n    var stateTable = createTable(input);\n    var implicationTable = getEmptyImplicationTableFor(stateTable);\n    firstIteration(stateTable, implicationTable);\n    var clone = implicationTable;\n    iterations.push(_.cloneDeep(implicationTable));\n    var unequalStateList = initializeUnequalStateList([], implicationTable);\n    repeatImplicationTable(iterations, implicationTable, unequalStateList);\n    var equivalentStates = findEquivalentStates(implicationTable, []);\n    stateTable = reduceStateTable(stateTable, equivalentStates);\n    iterations.push(_.cloneDeep(stateTable));\n    return iterations;\n}\nfunction printIterations(iterations) {\n    for(var i = 0; i < iterations.length - 1; i++){\n        prettyPrintTable(iterations[i]);\n        console.log();\n    }\n    console.log(iterations[iterations.length - 1]);\n} // var test = createTable(input);\n // console.log('\\nInitial State Table :')\n // printTable(test);\n // var STable = getEmptyImplicationTableFor(test);\n // firstIteration(test,STable);\n // console.log('\\nAfter 1st iteration :')\n // prettyPrintTable(STable);\n // let unequalStateList = initializeUnequalStateList([],STable);\n // console.log(`\\nunequalStateList :\\n[${unequalStateList.toString()}]`);\n // console.log('\\nAfter all iterations :')\n // repeatImplicationTable(STable,unequalStateList);\n // prettyPrintTable(STable);\n // let equivalentStates = findEquivalentStates(STable,[]);\n // console.log(`\\nequivalentStates :\\n[${equivalentStates.toString()}]`);\n // test = reduceStateTable(test,equivalentStates);\n // console.log('\\nReduced State Table :')\n // printTable(test);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./generator.js\n"));

/***/ })

});