"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./generator.js":
/*!**********************!*\
  !*** ./generator.js ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"compareArrays\": function() { return /* binding */ compareArrays; },\n/* harmony export */   \"createTable\": function() { return /* binding */ createTable; },\n/* harmony export */   \"deleteEquivalentRow\": function() { return /* binding */ deleteEquivalentRow; },\n/* harmony export */   \"deleteRow\": function() { return /* binding */ deleteRow; },\n/* harmony export */   \"exInput1\": function() { return /* binding */ exInput1; },\n/* harmony export */   \"exInput2\": function() { return /* binding */ exInput2; },\n/* harmony export */   \"findAndReplaceFullyEquivalentRows\": function() { return /* binding */ findAndReplaceFullyEquivalentRows; },\n/* harmony export */   \"findEquivalentStates\": function() { return /* binding */ findEquivalentStates; },\n/* harmony export */   \"firstIteration\": function() { return /* binding */ firstIteration; },\n/* harmony export */   \"getEmptyImplicationTableFor\": function() { return /* binding */ getEmptyImplicationTableFor; },\n/* harmony export */   \"implicationTableStep\": function() { return /* binding */ implicationTableStep; },\n/* harmony export */   \"initializeUnequalStateList\": function() { return /* binding */ initializeUnequalStateList; },\n/* harmony export */   \"prettyPrintTable\": function() { return /* binding */ prettyPrintTable; },\n/* harmony export */   \"printIterations\": function() { return /* binding */ printIterations; },\n/* harmony export */   \"printTable\": function() { return /* binding */ printTable; },\n/* harmony export */   \"reduceStateTable\": function() { return /* binding */ reduceStateTable; },\n/* harmony export */   \"repeatImplicationTable\": function() { return /* binding */ repeatImplicationTable; },\n/* harmony export */   \"reverseString\": function() { return /* binding */ reverseString; },\n/* harmony export */   \"solve\": function() { return /* binding */ solve; }\n/* harmony export */ });\nvar _ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\nvar exInput1 = {\n    \"present-state\": [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\"\n    ],\n    \"next-state-x0\": [\n        \"a\",\n        \"d\",\n        \"f\",\n        \"d\",\n        \"b\",\n        \"g\",\n        \"a\"\n    ],\n    \"next-state-x1\": [\n        \"b\",\n        \"c\",\n        \"b\",\n        \"f\",\n        \"g\",\n        \"c\",\n        \"f\"\n    ],\n    \"output-x0\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ],\n    \"output-x1\": [\n        0,\n        1,\n        0,\n        0,\n        0,\n        1,\n        0\n    ]\n};\nvar exInput2 = {\n    \"present-state\": [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\"\n    ],\n    \"next-state-x0\": [\n        \"b\",\n        \"d\",\n        \"f\",\n        \"a\",\n        \"a\",\n        \"a\",\n        \"a\"\n    ],\n    \"next-state-x1\": [\n        \"c\",\n        \"e\",\n        \"g\",\n        \"a\",\n        \"a\",\n        \"a\",\n        \"a\"\n    ],\n    \"output-x0\": [\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        1\n    ],\n    \"output-x1\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ]\n};\nfunction printTable(table) {\n    for(var i = 0; i < table.length; i++)console.log(table[i]);\n}\nfunction prettyPrintTable(table) {\n    for(var i = 0; i < table.length; i++){\n        var row = \"\";\n        for(var j = 0; j < table[0].length; j++){\n            var cell = \"\";\n            var k;\n            for(k = 0; k < table[i][j].length - 1; k++){\n                cell += table[i][j][k] + \",\";\n            }\n            cell += table[i][j][k];\n            if (cell != \"undefined\") row += \"[\".concat(cell, \"] \");\n        }\n        if (row != \"\") console.log(row);\n    }\n}\nfunction reverseString(str) {\n    var arrayStrings = str.split(\"\");\n    var reverseArray = arrayStrings.reverse();\n    var joinArray = reverseArray.join(\"\");\n    return joinArray;\n}\nfunction compareArrays(array1, array2, s1, s2, n) {\n    var a1 = \"\", a2 = \"\";\n    for(var i = 0; i < n; i++){\n        a1 = a1 + array1[s1 + i] + \":\";\n        a2 = a2 + array2[s2 + i] + \":\";\n    }\n    if (a1 == a2) return true;\n    return false;\n}\nfunction createTable(input) {\n    var stateTable = [];\n    var totalStates = input[\"present-state\"].length;\n    for(var state = 0; state < totalStates; state++){\n        var row = [];\n        row.push(input[\"present-state\"][state]);\n        row.push(input[\"next-state-x0\"][state]);\n        row.push(input[\"next-state-x1\"][state]);\n        row.push(input[\"output-x0\"][state]);\n        row.push(input[\"output-x1\"][state]);\n        stateTable.push(row);\n    }\n    return stateTable;\n}\nfunction findAndReplaceFullyEquivalentRows(table) {\n    var output = [\n        [],\n        [],\n        [],\n        []\n    ];\n    var totalStates = table.length;\n    var totalRowEntries = table[0].length;\n    for(var i = 0; i < totalStates; i++){\n        for(var j = 0; j < totalStates; j++){\n            if (i != j) {\n                if (compareArrays(table[i], table[j], 1, 1, totalRowEntries)) {\n                    if (compareArrays(table[i], [\n                        0,\n                        0\n                    ], 3, 0, 2) && !output[0].includes(table[i][0])) output[0].push(table[i][0]);\n                    else if (compareArrays(table[i], [\n                        0,\n                        1\n                    ], 3, 0, 2) && !output[1].includes(table[i][0])) output[1].push(table[i][0]);\n                    else if (compareArrays(table[i], [\n                        1,\n                        0\n                    ], 3, 0, 2) && !output[2].includes(table[i][0])) output[2].push(table[i][0]);\n                    else if (compareArrays(table[i], [\n                        1,\n                        1\n                    ], 3, 0, 2) && !output[3].includes(table[i][0])) output[3].push(table[i][0]);\n                }\n            }\n        }\n    }\n    for(var i1 = 0; i1 < output.length; i1++){\n        output[i1] = output[i1].sort();\n        if (output[i1].length != 0) {\n            for(var j1 = 0; j1 < table.length; j1++){\n                if (output[i1].includes(table[j1][1])) table[j1][1] = output[i1][0];\n                if (output[i1].includes(table[j1][2])) table[j1][2] = output[i1][0];\n            }\n        }\n    }\n    return output;\n}\nfunction getEmptyImplicationTableFor(table) {\n    var implicationTable = [];\n    for(var i = 0; i < table.length; i++){\n        var row = [];\n        for(var j = 0; j < table.length; j++)row.push([]);\n        implicationTable.push(row);\n    }\n    return implicationTable;\n}\nfunction firstIteration(table, STable) {\n    var row = 0, col = 0;\n    var tableLength = table.length;\n    var rowSize = table[0].length;\n    for(var i = 0; i < tableLength; i++){\n        for(var j = 0; j < tableLength; j++){\n            if (i < j && row < tableLength) {\n                if (table[i][1] == table[j][1] && table[i][2] == table[j][2]) if (compareArrays(table[i], table[j], 3, 3, rowSize - 3) && !STable[row][col].includes(\"X\")) {\n                    if (table[i][1] == table[j][1] && table[i][2] == table[j][2] && table[i][1] == table[i][2]) STable[row][col].push(table[i][1] + \"=\" + table[j][1]);\n                    if (table[i][1] != table[j][1] && table[i][0] + table[j][0] != table[i][1] + table[j][1] && table[i][0] + table[j][0] != table[j][1] + table[i][1]) STable[row][col].push(table[i][1] + \"=\" + table[j][1]);\n                    if (!STable[row][col].includes(table[i][2] + \"=\" + table[j][2]) && table[i][2] != table[j][2] && table[i][0] + table[j][0] != table[i][2] + table[j][2] && table[i][0] + table[j][0] != table[j][2] + table[i][2]) STable[row][col].push(table[i][2] + \"=\" + table[j][2]);\n                } else {\n                    STable[row][col].push(\"X\");\n                }\n                if (STable[row][col].length == 0) STable[row][col].push(\"X\");\n            }\n            row += 1;\n        }\n        col += 1;\n        row = 0;\n    }\n}\nfunction initializeUnequalStateList(list, STable) {\n    var row = \"b\", col = \"a\";\n    for(var i = 1; i < STable.length; i++){\n        for(var j = 0; j < i; j++){\n            if (STable[i][j].includes(\"X\")) list.push(\"\".concat(row, \"=\").concat(col));\n            col = String.fromCharCode(col.codePointAt(0) + 1);\n        }\n        row = String.fromCharCode(row.codePointAt(0) + 1);\n        col = \"a\";\n    }\n    return list;\n}\nfunction implicationTableStep(STable, unequalStateList) {\n    var newUnequalStateList = _.cloneDeep(unequalStateList);\n    var row = \"b\";\n    var col = \"a\";\n    for(var i = 1; i < STable.length; i++){\n        for(var j = 0; j < i; j++){\n            for(var k = 0; k < STable[i][j].length; k++){\n                var entry = STable[i][j][k];\n                if (entry != \"X\" && (unequalStateList.includes(entry) || unequalStateList.includes(reverseString(entry)))) {\n                    newUnequalStateList.push(\"\".concat(row, \"=\").concat(col));\n                    STable[i][j] = [\n                        \"X\"\n                    ];\n                }\n            }\n            col = String.fromCharCode(col.codePointAt(0) + 1);\n        }\n        row = String.fromCharCode(row.codePointAt(0) + 1);\n        col = \"a\";\n    }\n    return newUnequalStateList;\n}\nfunction repeatImplicationTable(iterations, STable, unequalStateList) {\n    var xCount = 0, xCountNew = 0;\n    while(true){\n        xCount = 0;\n        xCountNew = 0;\n        for(var k = 1; k < STable.length; k++){\n            for(var l = 0; l < k; l++){\n                if (STable[k][l] == \"X\") xCount += 1;\n            }\n        }\n        unequalStateList = implicationTableStep(STable, unequalStateList);\n        var clone = STable;\n        for(var k1 = 1; k1 < STable.length; k1++){\n            for(var l1 = 0; l1 < k1; l1++){\n                if (STable[k1][l1] == \"X\") xCountNew += 1;\n            }\n        }\n        if (xCount == xCountNew || xCountNew == (STable.length - 1) * STable.length / 2) return;\n        iterations.push(_.cloneDeep(STable));\n    }\n}\nfunction findEquivalentStates(STable, list) {\n    for(var i = 1; i < STable.length; i++){\n        for(var j = 0; j < i; j++){\n            if (STable[i][j] != \"X\") list.push(STable[i][j]);\n        }\n    }\n    return list;\n}\nfunction reduceStateTable(table, equivalentStates) {\n    for(var i = 0; i < equivalentStates.length; i++){\n        for(var j = 0; j < table.length; j++){\n            if (table[j][0] == equivalentStates[i][0][equivalentStates[i][0].length - 1]) {\n                table.splice(j, 1);\n                break;\n            }\n        }\n        for(var j1 = 0; j1 < table.length; j1++){\n            for(var k = 1; k < 3; k++){\n                if (table[j1][k] == equivalentStates[i][0][equivalentStates[i][0].length - 1]) table[j1][k] = equivalentStates[i][0][0];\n            }\n        }\n    }\n    for(var i1 = 0; i1 < table.length; i1++){\n        for(var j2 = i1 + 1; j2 < table.length; j2++){\n            if (table[i1][1] + table[i1][2] + table[i1][3] + table[i1][4] == table[j2][1] + table[j2][2] + table[j2][3] + table[j2][4]) {\n                table.splice(j2, 1);\n            }\n        }\n    }\n    return table;\n}\nfunction deleteRow(arr, row) {\n    arr = arr.slice(0); // make copy\n    arr.splice(row - 1, 1);\n    return arr;\n}\nfunction deleteEquivalentRow(table, output) {\n    console.log(\"test\");\n    for(var i = 0; i < output.length; i++){\n        if (output[i].length != 0) {\n            var clone = output[i].splice(0);\n            clone.shift();\n            for(var k = 0; k < table.length; k++){\n                console.log(clone);\n                console.log(table[k][0]);\n                console.log(clone.includes(table[k][0]));\n                if (clone.includes(table[k][0])) {\n                    table = deleteRow(table, k + 1);\n                    break;\n                }\n            }\n        }\n    }\n    return table;\n}\nfunction solve(input) {\n    var iterations = [];\n    var stateTable = createTable(input);\n    var implicationTable = getEmptyImplicationTableFor(stateTable);\n    firstIteration(stateTable, implicationTable);\n    var clone = implicationTable;\n    iterations.push(_.cloneDeep(implicationTable));\n    var unequalStateList = initializeUnequalStateList([], implicationTable);\n    repeatImplicationTable(iterations, implicationTable, unequalStateList);\n    var equivalentStates = findEquivalentStates(implicationTable, []);\n    stateTable = reduceStateTable(stateTable, equivalentStates);\n    iterations.push(_.cloneDeep(stateTable));\n    return iterations;\n}\nfunction printIterations(iterations) {\n    for(var i = 0; i < iterations.length - 1; i++){\n        prettyPrintTable(iterations[i]);\n        console.log();\n    }\n    console.log(iterations[iterations.length - 1]);\n} // var test = createTable(input);\n // console.log('\\nInitial State Table :')\n // printTable(test);\n // var STable = getEmptyImplicationTableFor(test);\n // firstIteration(test,STable);\n // console.log('\\nAfter 1st iteration :')\n // prettyPrintTable(STable);\n // let unequalStateList = initializeUnequalStateList([],STable);\n // console.log(`\\nunequalStateList :\\n[${unequalStateList.toString()}]`);\n // console.log('\\nAfter all iterations :')\n // repeatImplicationTable(STable,unequalStateList);\n // prettyPrintTable(STable);\n // let equivalentStates = findEquivalentStates(STable,[]);\n // console.log(`\\nequivalentStates :\\n[${equivalentStates.toString()}]`);\n // test = reduceStateTable(test,equivalentStates);\n // console.log('\\nReduced State Table :')\n // printTable(test);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWdCLEVBQUNZLGdCQUFnQixDQUFDLENBQUM7SUFDckUsSUFBSVksZ0JBQWdCLEdBQUdGLG9CQUFvQixDQUFDdEIsZ0JBQWdCLEVBQUMsRUFBRSxDQUFDO0lBQ2hFVixVQUFVLEdBQUdpQyxnQkFBZ0IsQ0FBQ2pDLFVBQVUsRUFBQ2tDLGdCQUFnQixDQUFDLENBQUM7SUFHM0RQLFVBQVUsQ0FBQ3hCLElBQUksQ0FBQ3BDLENBQUMsQ0FBQ3lELFNBQVMsQ0FBQ3hCLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDekMsT0FBTzJCLFVBQVUsQ0FBQztDQUNuQjtBQUVNLFNBQVNlLGVBQWUsQ0FBQ2YsVUFBVSxFQUFFO0lBQzFDLElBQUksSUFBSXRELENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsR0FBQ3NELFVBQVUsQ0FBQ3JELE1BQU0sR0FBQyxDQUFDLEVBQUNELENBQUMsRUFBRSxDQUFDO1FBQ3BDSSxnQkFBZ0IsQ0FBQ2tELFVBQVUsQ0FBQ3RELENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaENFLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFLENBQUM7S0FDZjtJQUNERCxPQUFPLENBQUNDLEdBQUcsQ0FBQ21ELFVBQVUsQ0FBQ0EsVUFBVSxDQUFDckQsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUMsQ0FFRCxpQ0FBaUM7Q0FDakMseUNBQXlDO0NBQ3pDLG9CQUFvQjtDQUVwQixrREFBa0Q7Q0FDbEQsK0JBQStCO0NBQy9CLHlDQUF5QztDQUN6Qyw0QkFBNEI7Q0FFNUIsZ0VBQWdFO0NBQ2hFLHlFQUF5RTtDQUN6RSwwQ0FBMEM7Q0FDMUMsbURBQW1EO0NBQ25ELDRCQUE0QjtDQUU1QiwwREFBMEQ7Q0FDMUQseUVBQXlFO0NBRXpFLGtEQUFrRDtDQUNsRCx5Q0FBeUM7Q0FDekMsb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2dlbmVyYXRvci5qcz9kNzMwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGV4SW5wdXQxID0ge1xyXG4gICdwcmVzZW50LXN0YXRlJzpbJ2EnLCdiJywnYycsJ2QnLCdlJywnZicsJ2cnXSxcclxuICAnbmV4dC1zdGF0ZS14MCc6WydhJywnZCcsJ2YnLCdkJywnYicsJ2cnLCdhJ10sXHJcbiAgJ25leHQtc3RhdGUteDEnOlsnYicsJ2MnLCdiJywnZicsJ2cnLCdjJywnZiddLFxyXG4gICdvdXRwdXQteDAnOlswLDAsMCwwLDAsMCwwXSxcclxuICAnb3V0cHV0LXgxJzpbMCwxLDAsMCwwLDEsMF1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBleElucHV0MiA9IHtcclxuICAncHJlc2VudC1zdGF0ZSc6WydhJywnYicsJ2MnLCdkJywnZScsJ2YnLCdnJ10sXHJcbiAgJ25leHQtc3RhdGUteDAnOlsnYicsJ2QnLCdmJywnYScsJ2EnLCdhJywnYSddLFxyXG4gICduZXh0LXN0YXRlLXgxJzpbJ2MnLCdlJywnZycsJ2EnLCdhJywnYScsJ2EnXSxcclxuICAnb3V0cHV0LXgwJzpbMCwwLDAsMCwxLDAsMV0sXHJcbiAgJ291dHB1dC14MSc6WzAsMCwwLDAsMCwwLDBdXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludFRhYmxlKHRhYmxlKXtcclxuICBmb3IobGV0IGk9MDtpPHRhYmxlLmxlbmd0aDtpKyspXHJcbiAgICBjb25zb2xlLmxvZyh0YWJsZVtpXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmV0dHlQcmludFRhYmxlKHRhYmxlKXtcclxuICBmb3IobGV0IGk9MDtpPHRhYmxlLmxlbmd0aDtpKyspe1xyXG4gICAgdmFyIHJvdz1cIlwiO1xyXG4gICAgZm9yKGxldCBqPTA7ajx0YWJsZVswXS5sZW5ndGg7aisrKXtcclxuICAgICAgdmFyIGNlbGw9XCJcIjtcclxuICAgICAgdmFyIGs7XHJcbiAgICAgIGZvcihrPTA7azx0YWJsZVtpXVtqXS5sZW5ndGgtMTtrKyspe1xyXG4gICAgICAgIGNlbGwrPXRhYmxlW2ldW2pdW2tdK1wiLFwiO1xyXG4gICAgICB9XHJcbiAgICAgIGNlbGwrPXRhYmxlW2ldW2pdW2tdO1xyXG4gICAgICBpZihjZWxsIT1cInVuZGVmaW5lZFwiKVxyXG4gICAgICAgIHJvdys9YFske2NlbGx9XSBgO1xyXG4gICAgfVxyXG4gICAgaWYocm93IT1cIlwiKVxyXG4gICAgICBjb25zb2xlLmxvZyhyb3cpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJldmVyc2VTdHJpbmcoc3RyKSB7XHJcbiAgY29uc3QgYXJyYXlTdHJpbmdzID0gc3RyLnNwbGl0KFwiXCIpO1xyXG4gIGNvbnN0IHJldmVyc2VBcnJheSA9IGFycmF5U3RyaW5ncy5yZXZlcnNlKCk7XHJcbiAgY29uc3Qgam9pbkFycmF5ID0gcmV2ZXJzZUFycmF5LmpvaW4oXCJcIik7XHJcbiAgcmV0dXJuIGpvaW5BcnJheTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLGFycmF5MixzMSxzMixuKXtcclxuICB2YXIgYTE9XCJcIixhMj1cIlwiO1xyXG4gIGZvcihsZXQgaT0wO2k8bjtpKyspe1xyXG4gICAgYTE9YTErYXJyYXkxW3MxK2ldK1wiOlwiO1xyXG4gICAgYTI9YTIrYXJyYXkyW3MyK2ldK1wiOlwiXHJcbiAgfVxyXG4gIGlmKGExPT1hMilcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhYmxlKGlucHV0KXtcclxuICB2YXIgc3RhdGVUYWJsZSA9IFtdO1xyXG4gIHZhciB0b3RhbFN0YXRlcyA9IGlucHV0WydwcmVzZW50LXN0YXRlJ10ubGVuZ3RoO1xyXG4gIGZvcihsZXQgc3RhdGU9MDtzdGF0ZTx0b3RhbFN0YXRlcztzdGF0ZSsrKXtcclxuICAgIHZhciByb3cgPSBbXTtcclxuICAgIHJvdy5wdXNoKGlucHV0WydwcmVzZW50LXN0YXRlJ11bc3RhdGVdKTtcclxuICAgIHJvdy5wdXNoKGlucHV0WyduZXh0LXN0YXRlLXgwJ11bc3RhdGVdKTtcclxuICAgIHJvdy5wdXNoKGlucHV0WyduZXh0LXN0YXRlLXgxJ11bc3RhdGVdKTtcclxuICAgIHJvdy5wdXNoKGlucHV0WydvdXRwdXQteDAnXVtzdGF0ZV0pO1xyXG4gICAgcm93LnB1c2goaW5wdXRbJ291dHB1dC14MSddW3N0YXRlXSk7XHJcbiAgICBzdGF0ZVRhYmxlLnB1c2gocm93KTtcclxuICB9XHJcbiAgcmV0dXJuIHN0YXRlVGFibGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQW5kUmVwbGFjZUZ1bGx5RXF1aXZhbGVudFJvd3ModGFibGUpe1xyXG4gIHZhciBvdXRwdXQgPSBbW10sW10sW10sW11dO1xyXG4gIHZhciB0b3RhbFN0YXRlcz10YWJsZS5sZW5ndGg7XHJcbiAgdmFyIHRvdGFsUm93RW50cmllcyA9IHRhYmxlWzBdLmxlbmd0aDtcclxuICBmb3IobGV0IGk9MDtpPHRvdGFsU3RhdGVzO2krKyl7XHJcbiAgICBmb3IobGV0IGo9MDtqPHRvdGFsU3RhdGVzO2orKyl7XHJcbiAgICAgIGlmKGkhPWope1xyXG4gICAgICAgIGlmKGNvbXBhcmVBcnJheXModGFibGVbaV0sdGFibGVbal0sMSwxLHRvdGFsUm93RW50cmllcykpe1xyXG4gICAgICAgICAgaWYoY29tcGFyZUFycmF5cyh0YWJsZVtpXSxbMCwwXSwzLDAsMikmJiFvdXRwdXRbMF0uaW5jbHVkZXModGFibGVbaV1bMF0pKVxyXG4gICAgICAgICAgICBvdXRwdXRbMF0ucHVzaCh0YWJsZVtpXVswXSk7XHJcbiAgICAgICAgICBlbHNlIGlmKGNvbXBhcmVBcnJheXModGFibGVbaV0sWzAsMV0sMywwLDIpJiYhb3V0cHV0WzFdLmluY2x1ZGVzKHRhYmxlW2ldWzBdKSlcclxuICAgICAgICAgICAgb3V0cHV0WzFdLnB1c2godGFibGVbaV1bMF0pO1xyXG4gICAgICAgICAgZWxzZSBpZihjb21wYXJlQXJyYXlzKHRhYmxlW2ldLFsxLDBdLDMsMCwyKSYmIW91dHB1dFsyXS5pbmNsdWRlcyh0YWJsZVtpXVswXSkpXHJcbiAgICAgICAgICAgIG91dHB1dFsyXS5wdXNoKHRhYmxlW2ldWzBdKTtcclxuICAgICAgICAgIGVsc2UgaWYoY29tcGFyZUFycmF5cyh0YWJsZVtpXSxbMSwxXSwzLDAsMikmJiFvdXRwdXRbM10uaW5jbHVkZXModGFibGVbaV1bMF0pKVxyXG4gICAgICAgICAgICBvdXRwdXRbM10ucHVzaCh0YWJsZVtpXVswXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZvcihsZXQgaT0wO2k8b3V0cHV0Lmxlbmd0aDtpKyspe1xyXG4gICAgb3V0cHV0W2ldID0gb3V0cHV0W2ldLnNvcnQoKTtcclxuICAgIGlmKG91dHB1dFtpXS5sZW5ndGghPTApe1xyXG4gICAgICBmb3IobGV0IGo9MDtqPHRhYmxlLmxlbmd0aDtqKyspe1xyXG4gICAgICAgIGlmKG91dHB1dFtpXS5pbmNsdWRlcyh0YWJsZVtqXVsxXSkpXHJcbiAgICAgICAgICB0YWJsZVtqXVsxXT1vdXRwdXRbaV1bMF07XHJcbiAgICAgICAgaWYob3V0cHV0W2ldLmluY2x1ZGVzKHRhYmxlW2pdWzJdKSlcclxuICAgICAgICAgIHRhYmxlW2pdWzJdPW91dHB1dFtpXVswXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbXB0eUltcGxpY2F0aW9uVGFibGVGb3IodGFibGUpe1xyXG4gIHZhciAgaW1wbGljYXRpb25UYWJsZT1bXTtcclxuICBmb3IobGV0IGk9MDtpPHRhYmxlLmxlbmd0aDtpKyspe1xyXG4gICAgdmFyIHJvdz1bXTtcclxuICAgIGZvcihsZXQgaj0wO2o8dGFibGUubGVuZ3RoO2orKylcclxuICAgICAgcm93LnB1c2goW10pO1xyXG4gICAgaW1wbGljYXRpb25UYWJsZS5wdXNoKHJvdyk7XHJcbiAgfVxyXG4gIHJldHVybiBpbXBsaWNhdGlvblRhYmxlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlyc3RJdGVyYXRpb24odGFibGUsU1RhYmxlKXtcclxuICB2YXIgcm93PTAsY29sPTA7XHJcbiAgY29uc3QgdGFibGVMZW5ndGggPSB0YWJsZS5sZW5ndGg7XHJcbiAgY29uc3Qgcm93U2l6ZSA9IHRhYmxlWzBdLmxlbmd0aDtcclxuICBmb3IobGV0IGk9MDtpPHRhYmxlTGVuZ3RoO2krKyl7XHJcbiAgICBmb3IobGV0IGo9MDtqPHRhYmxlTGVuZ3RoO2orKyl7XHJcbiAgICAgIGlmKGk8aiYmcm93PHRhYmxlTGVuZ3RoKXtcclxuICAgICAgICBpZih0YWJsZVtpXVsxXT09dGFibGVbal1bMV0mJnRhYmxlW2ldWzJdPT10YWJsZVtqXVsyXSlcclxuICAgICAgICBpZihjb21wYXJlQXJyYXlzKHRhYmxlW2ldLHRhYmxlW2pdLDMsMyxyb3dTaXplLTMpJiYhU1RhYmxlW3Jvd11bY29sXS5pbmNsdWRlcygnWCcpKXtcclxuICAgICAgICAgIGlmKHRhYmxlW2ldWzFdPT10YWJsZVtqXVsxXSYmdGFibGVbaV1bMl09PXRhYmxlW2pdWzJdJiZ0YWJsZVtpXVsxXT09dGFibGVbaV1bMl0pXHJcbiAgICAgICAgICAgIFNUYWJsZVtyb3ddW2NvbF0ucHVzaCh0YWJsZVtpXVsxXSsnPScrdGFibGVbal1bMV0pO1xyXG4gICAgICAgICAgaWYodGFibGVbaV1bMV0hPXRhYmxlW2pdWzFdICYmICh0YWJsZVtpXVswXSt0YWJsZVtqXVswXSkhPSh0YWJsZVtpXVsxXSt0YWJsZVtqXVsxXSkgJiYgKHRhYmxlW2ldWzBdK3RhYmxlW2pdWzBdKSE9KHRhYmxlW2pdWzFdK3RhYmxlW2ldWzFdKSlcclxuICAgICAgICAgICAgU1RhYmxlW3Jvd11bY29sXS5wdXNoKHRhYmxlW2ldWzFdKyc9Jyt0YWJsZVtqXVsxXSk7XHJcbiAgICAgICAgICBpZighKFNUYWJsZVtyb3ddW2NvbF0uaW5jbHVkZXModGFibGVbaV1bMl0rJz0nK3RhYmxlW2pdWzJdKSkgJiYgdGFibGVbaV1bMl0hPXRhYmxlW2pdWzJdICYmICh0YWJsZVtpXVswXSt0YWJsZVtqXVswXSkhPSh0YWJsZVtpXVsyXSt0YWJsZVtqXVsyXSkgJiYgKHRhYmxlW2ldWzBdK3RhYmxlW2pdWzBdKSE9KHRhYmxlW2pdWzJdK3RhYmxlW2ldWzJdKSlcclxuICAgICAgICAgICAgU1RhYmxlW3Jvd11bY29sXS5wdXNoKHRhYmxlW2ldWzJdKyc9Jyt0YWJsZVtqXVsyXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgU1RhYmxlW3Jvd11bY29sXS5wdXNoKCdYJyk7XHJcbiAgICAgICAgfSBcclxuICAgICAgICBpZihTVGFibGVbcm93XVtjb2xdLmxlbmd0aD09MClcclxuICAgICAgICAgIFNUYWJsZVtyb3ddW2NvbF0ucHVzaCgnWCcpO1xyXG4gICAgICB9XHJcbiAgICAgIHJvdys9MTtcclxuICAgIH1cclxuICAgIGNvbCs9MTtcclxuICAgIHJvdz0wO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplVW5lcXVhbFN0YXRlTGlzdChsaXN0LFNUYWJsZSl7XHJcbiAgbGV0IHJvdz0nYicsY29sPSdhJztcclxuICBmb3IobGV0IGk9MTtpPFNUYWJsZS5sZW5ndGg7aSsrKXtcclxuICAgIGZvcihsZXQgaj0wO2o8aTtqKyspe1xyXG4gICAgICBpZihTVGFibGVbaV1bal0uaW5jbHVkZXMoJ1gnKSlcclxuICAgICAgICBsaXN0LnB1c2goYCR7cm93fT0ke2NvbH1gKTtcclxuICAgICAgY29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY29kZVBvaW50QXQoMCkrMSk7XHJcbiAgICB9XHJcbiAgICByb3cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJvdy5jb2RlUG9pbnRBdCgwKSsxKTtcclxuICAgIGNvbD0nYSc7XHJcbiAgfVxyXG4gIHJldHVybiBsaXN0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW1wbGljYXRpb25UYWJsZVN0ZXAoU1RhYmxlLHVuZXF1YWxTdGF0ZUxpc3Qpe1xyXG4gIGxldCBuZXdVbmVxdWFsU3RhdGVMaXN0ID0gXy5jbG9uZURlZXAodW5lcXVhbFN0YXRlTGlzdCk7XHJcbiAgbGV0IHJvdz0nYic7XHJcbiAgbGV0IGNvbD0nYSc7XHJcbiAgZm9yKGxldCBpPTE7aTxTVGFibGUubGVuZ3RoO2krKyl7XHJcbiAgICBmb3IobGV0IGo9MDtqPGk7aisrKXtcclxuICAgICAgZm9yKGxldCBrPTA7azxTVGFibGVbaV1bal0ubGVuZ3RoO2srKyl7XHJcbiAgICAgICAgbGV0IGVudHJ5ID0gU1RhYmxlW2ldW2pdW2tdO1xyXG4gICAgICAgIGlmKGVudHJ5IT0nWCcmJiAodW5lcXVhbFN0YXRlTGlzdC5pbmNsdWRlcyhlbnRyeSkgfHwgdW5lcXVhbFN0YXRlTGlzdC5pbmNsdWRlcyhyZXZlcnNlU3RyaW5nKGVudHJ5KSkpKXtcclxuICAgICAgICAgIG5ld1VuZXF1YWxTdGF0ZUxpc3QucHVzaChgJHtyb3d9PSR7Y29sfWApO1xyXG4gICAgICAgICAgU1RhYmxlW2ldW2pdPVsnWCddO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jb2RlUG9pbnRBdCgwKSsxKTtcclxuICAgIH1cclxuICAgIHJvdyA9IFN0cmluZy5mcm9tQ2hhckNvZGUocm93LmNvZGVQb2ludEF0KDApKzEpO1xyXG4gICAgY29sPSdhJztcclxuICB9XHJcbiAgcmV0dXJuIG5ld1VuZXF1YWxTdGF0ZUxpc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRJbXBsaWNhdGlvblRhYmxlKGl0ZXJhdGlvbnMsU1RhYmxlLHVuZXF1YWxTdGF0ZUxpc3Qpe1xyXG4gIHZhciB4Q291bnQ9MCx4Q291bnROZXc9MDtcclxuICAgIHdoaWxlKHRydWUpe1xyXG4gICAgICB4Q291bnQ9MDt4Q291bnROZXc9MDtcclxuICAgICAgZm9yKGxldCBrPTE7azxTVGFibGUubGVuZ3RoO2srKyl7XHJcbiAgICAgICAgZm9yKGxldCBsPTA7bDxrO2wrKyl7XHJcbiAgICAgICAgICBpZihTVGFibGVba11bbF09PSdYJylcclxuICAgICAgICAgICAgeENvdW50Kz0xO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB1bmVxdWFsU3RhdGVMaXN0ID0gaW1wbGljYXRpb25UYWJsZVN0ZXAoU1RhYmxlLHVuZXF1YWxTdGF0ZUxpc3QpO1xyXG4gICAgICB2YXIgY2xvbmUgPSBTVGFibGU7XHJcbiAgICAgIGZvcihsZXQgaz0xO2s8U1RhYmxlLmxlbmd0aDtrKyspe1xyXG4gICAgICAgIGZvcihsZXQgbD0wO2w8aztsKyspe1xyXG4gICAgICAgICAgaWYoU1RhYmxlW2tdW2xdPT0nWCcpXHJcbiAgICAgICAgICB4Q291bnROZXcrPTE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmKHhDb3VudD09eENvdW50TmV3IHx8IHhDb3VudE5ldz09KChTVGFibGUubGVuZ3RoLTEpKihTVGFibGUubGVuZ3RoKSkvMilcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIGl0ZXJhdGlvbnMucHVzaChfLmNsb25lRGVlcChTVGFibGUpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFcXVpdmFsZW50U3RhdGVzKFNUYWJsZSxsaXN0KXtcclxuICBmb3IobGV0IGk9MTtpPFNUYWJsZS5sZW5ndGg7aSsrKXtcclxuICAgIGZvcihsZXQgaj0wO2o8aTtqKyspe1xyXG4gICAgICBpZihTVGFibGVbaV1bal0hPSdYJylcclxuICAgICAgICBsaXN0LnB1c2goU1RhYmxlW2ldW2pdKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGxpc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VTdGF0ZVRhYmxlKHRhYmxlLGVxdWl2YWxlbnRTdGF0ZXMpe1xyXG4gIGZvcihsZXQgaT0wO2k8ZXF1aXZhbGVudFN0YXRlcy5sZW5ndGg7aSsrKXtcclxuICAgIGZvcihsZXQgaj0wO2o8dGFibGUubGVuZ3RoO2orKyl7XHJcbiAgICAgIGlmKHRhYmxlW2pdWzBdPT1lcXVpdmFsZW50U3RhdGVzW2ldWzBdW2VxdWl2YWxlbnRTdGF0ZXNbaV1bMF0ubGVuZ3RoLTFdKXtcclxuICAgICAgICB0YWJsZS5zcGxpY2UoaiwxKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yKGxldCBqPTA7ajx0YWJsZS5sZW5ndGg7aisrKXtcclxuICAgICAgZm9yKGxldCBrPTE7azwzO2srKyl7XHJcbiAgICAgICAgaWYodGFibGVbal1ba109PWVxdWl2YWxlbnRTdGF0ZXNbaV1bMF1bZXF1aXZhbGVudFN0YXRlc1tpXVswXS5sZW5ndGgtMV0pXHJcbiAgICAgICAgICB0YWJsZVtqXVtrXT1lcXVpdmFsZW50U3RhdGVzW2ldWzBdWzBdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZvcihsZXQgaT0wO2k8dGFibGUubGVuZ3RoO2krKyl7XHJcbiAgICBmb3IobGV0IGo9aSsxO2o8dGFibGUubGVuZ3RoO2orKyl7XHJcbiAgICAgIGlmKHRhYmxlW2ldWzFdK3RhYmxlW2ldWzJdK3RhYmxlW2ldWzNdK3RhYmxlW2ldWzRdID09IHRhYmxlW2pdWzFdK3RhYmxlW2pdWzJdK3RhYmxlW2pdWzNdK3RhYmxlW2pdWzRdKXtcclxuICAgICAgICB0YWJsZS5zcGxpY2UoaiwxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGFibGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVSb3coYXJyLCByb3cpIHtcclxuICBhcnIgPSBhcnIuc2xpY2UoMCk7IC8vIG1ha2UgY29weVxyXG4gIGFyci5zcGxpY2Uocm93IC0gMSwgMSk7XHJcbiAgcmV0dXJuIGFycjtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVFcXVpdmFsZW50Um93KHRhYmxlLCBvdXRwdXQpe1xyXG4gIGNvbnNvbGUubG9nKFwidGVzdFwiKTtcclxuICBmb3IobGV0IGk9MDsgaTxvdXRwdXQubGVuZ3RoOyBpKyspe1xyXG4gICAgaWYob3V0cHV0W2ldLmxlbmd0aCAhPSAwKXtcclxuICAgICAgbGV0IGNsb25lID0gb3V0cHV0W2ldLnNwbGljZSgwKTtcclxuICAgICAgY2xvbmUuc2hpZnQoKTtcclxuICAgICAgZm9yKGxldCBrPTA7azx0YWJsZS5sZW5ndGg7IGsrKyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coY2xvbmUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRhYmxlW2tdWzBdKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhjbG9uZS5pbmNsdWRlcyh0YWJsZVtrXVswXSkpO1xyXG4gICAgICAgIGlmKGNsb25lLmluY2x1ZGVzKHRhYmxlW2tdWzBdKSl7XHJcbiAgICAgICAgICB0YWJsZSA9IGRlbGV0ZVJvdyh0YWJsZSxrKzEpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0YWJsZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNvbHZlKGlucHV0KSB7XHJcbiAgdmFyIGl0ZXJhdGlvbnMgPSBbXTtcclxuICB2YXIgc3RhdGVUYWJsZSA9IGNyZWF0ZVRhYmxlKGlucHV0KTtcclxuXHJcbiAgdmFyIGltcGxpY2F0aW9uVGFibGUgPSBnZXRFbXB0eUltcGxpY2F0aW9uVGFibGVGb3Ioc3RhdGVUYWJsZSk7XHJcbiAgZmlyc3RJdGVyYXRpb24oc3RhdGVUYWJsZSxpbXBsaWNhdGlvblRhYmxlKTtcclxuICB2YXIgY2xvbmUgPSBpbXBsaWNhdGlvblRhYmxlO1xyXG4gIGl0ZXJhdGlvbnMucHVzaChfLmNsb25lRGVlcChpbXBsaWNhdGlvblRhYmxlKSk7XHJcbiAgdmFyIHVuZXF1YWxTdGF0ZUxpc3QgPSBpbml0aWFsaXplVW5lcXVhbFN0YXRlTGlzdChbXSxpbXBsaWNhdGlvblRhYmxlKTtcclxuICByZXBlYXRJbXBsaWNhdGlvblRhYmxlKGl0ZXJhdGlvbnMsaW1wbGljYXRpb25UYWJsZSx1bmVxdWFsU3RhdGVMaXN0KTtcclxuICB2YXIgZXF1aXZhbGVudFN0YXRlcyA9IGZpbmRFcXVpdmFsZW50U3RhdGVzKGltcGxpY2F0aW9uVGFibGUsW10pO1xyXG4gIHN0YXRlVGFibGUgPSByZWR1Y2VTdGF0ZVRhYmxlKHN0YXRlVGFibGUsZXF1aXZhbGVudFN0YXRlcyk7XHJcblxyXG5cclxuICBpdGVyYXRpb25zLnB1c2goXy5jbG9uZURlZXAoc3RhdGVUYWJsZSkpO1xyXG4gIHJldHVybiBpdGVyYXRpb25zO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRJdGVyYXRpb25zKGl0ZXJhdGlvbnMpIHtcclxuICBmb3IobGV0IGk9MDtpPGl0ZXJhdGlvbnMubGVuZ3RoLTE7aSsrKXtcclxuICAgIHByZXR0eVByaW50VGFibGUoaXRlcmF0aW9uc1tpXSk7XHJcbiAgICBjb25zb2xlLmxvZygpO1xyXG4gIH1cclxuICBjb25zb2xlLmxvZyhpdGVyYXRpb25zW2l0ZXJhdGlvbnMubGVuZ3RoLTFdKTtcclxufVxyXG5cclxuLy8gdmFyIHRlc3QgPSBjcmVhdGVUYWJsZShpbnB1dCk7XHJcbi8vIGNvbnNvbGUubG9nKCdcXG5Jbml0aWFsIFN0YXRlIFRhYmxlIDonKVxyXG4vLyBwcmludFRhYmxlKHRlc3QpO1xyXG5cclxuLy8gdmFyIFNUYWJsZSA9IGdldEVtcHR5SW1wbGljYXRpb25UYWJsZUZvcih0ZXN0KTtcclxuLy8gZmlyc3RJdGVyYXRpb24odGVzdCxTVGFibGUpO1xyXG4vLyBjb25zb2xlLmxvZygnXFxuQWZ0ZXIgMXN0IGl0ZXJhdGlvbiA6JylcclxuLy8gcHJldHR5UHJpbnRUYWJsZShTVGFibGUpO1xyXG5cclxuLy8gbGV0IHVuZXF1YWxTdGF0ZUxpc3QgPSBpbml0aWFsaXplVW5lcXVhbFN0YXRlTGlzdChbXSxTVGFibGUpO1xyXG4vLyBjb25zb2xlLmxvZyhgXFxudW5lcXVhbFN0YXRlTGlzdCA6XFxuWyR7dW5lcXVhbFN0YXRlTGlzdC50b1N0cmluZygpfV1gKTtcclxuLy8gY29uc29sZS5sb2coJ1xcbkFmdGVyIGFsbCBpdGVyYXRpb25zIDonKVxyXG4vLyByZXBlYXRJbXBsaWNhdGlvblRhYmxlKFNUYWJsZSx1bmVxdWFsU3RhdGVMaXN0KTtcclxuLy8gcHJldHR5UHJpbnRUYWJsZShTVGFibGUpO1xyXG5cclxuLy8gbGV0IGVxdWl2YWxlbnRTdGF0ZXMgPSBmaW5kRXF1aXZhbGVudFN0YXRlcyhTVGFibGUsW10pO1xyXG4vLyBjb25zb2xlLmxvZyhgXFxuZXF1aXZhbGVudFN0YXRlcyA6XFxuWyR7ZXF1aXZhbGVudFN0YXRlcy50b1N0cmluZygpfV1gKTtcclxuXHJcbi8vIHRlc3QgPSByZWR1Y2VTdGF0ZVRhYmxlKHRlc3QsZXF1aXZhbGVudFN0YXRlcyk7XHJcbi8vIGNvbnNvbGUubG9nKCdcXG5SZWR1Y2VkIFN0YXRlIFRhYmxlIDonKVxyXG4vLyBwcmludFRhYmxlKHRlc3QpO1xyXG5cclxuIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiZXhJbnB1dDEiLCJleElucHV0MiIsInByaW50VGFibGUiLCJ0YWJsZSIsImkiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwicHJldHR5UHJpbnRUYWJsZSIsInJvdyIsImoiLCJjZWxsIiwiayIsInJldmVyc2VTdHJpbmciLCJzdHIiLCJhcnJheVN0cmluZ3MiLCJzcGxpdCIsInJldmVyc2VBcnJheSIsInJldmVyc2UiLCJqb2luQXJyYXkiLCJqb2luIiwiY29tcGFyZUFycmF5cyIsImFycmF5MSIsImFycmF5MiIsInMxIiwiczIiLCJuIiwiYTEiLCJhMiIsImNyZWF0ZVRhYmxlIiwiaW5wdXQiLCJzdGF0ZVRhYmxlIiwidG90YWxTdGF0ZXMiLCJzdGF0ZSIsInB1c2giLCJmaW5kQW5kUmVwbGFjZUZ1bGx5RXF1aXZhbGVudFJvd3MiLCJvdXRwdXQiLCJ0b3RhbFJvd0VudHJpZXMiLCJpbmNsdWRlcyIsInNvcnQiLCJnZXRFbXB0eUltcGxpY2F0aW9uVGFibGVGb3IiLCJpbXBsaWNhdGlvblRhYmxlIiwiZmlyc3RJdGVyYXRpb24iLCJTVGFibGUiLCJjb2wiLCJ0YWJsZUxlbmd0aCIsInJvd1NpemUiLCJpbml0aWFsaXplVW5lcXVhbFN0YXRlTGlzdCIsImxpc3QiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjb2RlUG9pbnRBdCIsImltcGxpY2F0aW9uVGFibGVTdGVwIiwidW5lcXVhbFN0YXRlTGlzdCIsIm5ld1VuZXF1YWxTdGF0ZUxpc3QiLCJjbG9uZURlZXAiLCJlbnRyeSIsInJlcGVhdEltcGxpY2F0aW9uVGFibGUiLCJpdGVyYXRpb25zIiwieENvdW50IiwieENvdW50TmV3IiwibCIsImNsb25lIiwiZmluZEVxdWl2YWxlbnRTdGF0ZXMiLCJyZWR1Y2VTdGF0ZVRhYmxlIiwiZXF1aXZhbGVudFN0YXRlcyIsInNwbGljZSIsImRlbGV0ZVJvdyIsImFyciIsInNsaWNlIiwiZGVsZXRlRXF1aXZhbGVudFJvdyIsInNoaWZ0Iiwic29sdmUiLCJwcmludEl0ZXJhdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./generator.js\n"));

/***/ })

});